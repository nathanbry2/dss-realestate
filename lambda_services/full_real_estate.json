{
  "name": "full_real_estate",
  "endpoints": [
    {
      "envSelection": {
        "envMode": "INHERIT"
      },
      "testQueries": [
        {
          "q": {
            "address": "13 rue Saulnier",
            "postal_code": 75009,
            "surface": 75,
            "nb_main_rooms": 3,
            "year": 2021
          }
        },
        {
          "q": {
            "address": "13 rue Saulnier",
            "postal_code": 75009,
            "surface": 75,
            "nb_main_rooms": 3,
            "year": 2021
          }
        }
      ],
      "inputFolderRefs": [
        {
          "ref": "0zySYMnz"
        }
      ],
      "userFunctionName": "api_py_function",
      "code": "import dataiku\nimport pandas as pd, numpy as np\nfrom dataiku import pandasutils as pdu\nfrom geoloc_functions import find_location,distance_to_centre, direction_from_centre\nfrom openlocationcode import openlocationcode as olc\nfrom pluscode_functions import convert_pluscode\nfrom iris_functions import create_iris_polygon_dict, find_iris\nimport os.path\n\nfolder_path \u003d folders[0]\npath_of_iris_75 \u003d os.path.join(folder_path, \"iris_75.csv\") \npath_of_iris_data \u003d os.path.join(folder_path, \"transactions_by_iris_code_year_windows_prepared.csv\") \npath_of_olc_data \u003d os.path.join(folder_path, \"transactions_by_coordinates_couple_year_windows_prepared.csv\") \n\n\nwith open(path_of_iris_75) as f:\n    iris_75_df \u003d pd.read_csv(f)\n    \nwith open(path_of_iris_data) as f:\n    iris_data_df \u003d pd.read_csv(f)\n    \nwith open(path_of_olc_data) as f:\n    olc_data_df \u003d pd.read_csv(f)\n\ndataiku.set_default_project_key(\"REALESTATE\")\n\n\n#from dataiku.apinode import utils\n\ndef correct_date(date_column):\n\n    dates_list \u003d date_column.to_list()\n    new_dates_list \u003d []\n\n    for date in dates_list:\n        if date \u003e 2021:\n            new_date \u003d 2021\n        elif date \u003c 2014:\n            new_date \u003d 2014\n        else:\n            new_date \u003d date\n\n        new_dates_list.append(new_date)\n\n    return new_dates_list\n\n#iris_75 \u003d dataiku.Dataset(\"iris_75\")\n#iris_75_df \u003d iris_75.get_dataframe()\n\n# Insert here initialization code\n\n# This function is the entry point for your Python function API\n# You can call this function with passing \"param1\", \"param2\",\n# \"param3\" as arguments to the API call\n# (see REST API documentation)\ndef api_py_function(address, postal_code, surface,nb_main_rooms,year):\n    \n    df \u003d pd.DataFrame([[address, postal_code, surface,nb_main_rooms,year]],columns\u003d[\u0027address\u0027,\u0027postal_code\u0027,\u0027surface\u0027,\u0027nb_main_rooms\u0027,\u0027year\u0027])\n    \n    df[\u0027address_full\u0027] \u003d df[\u0027address\u0027]+\u0027, \u0027+df[\u0027postal_code\u0027].astype(str)\n\n    df[\u0027latitude\u0027] \u003d find_location(df[\u0027address_full\u0027])[0]\n    df[\u0027longitude\u0027] \u003d find_location(df[\u0027address_full\u0027])[1]\n    \n    df[\u0027distance_to_centre\u0027]\u003d distance_to_centre(df[\u0027latitude\u0027],df[\u0027longitude\u0027])\n\n    df[\u0027direction_from_centre\u0027] \u003d np.vectorize(direction_from_centre)(df[\u0027longitude\u0027],df[\u0027latitude\u0027])\n    \n    df[\u0027pluscode_16_first\u0027] \u003d np.vectorize(olc.encode)(df[\u0027latitude\u0027],df[\u0027longitude\u0027],17)\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027pluscode_10\u0027] \u003d [code[:11] for code in df[\u0027pluscode_16_first\u0027].to_list()]\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027v_coordinate\u0027],df[\u0027h_coordinate\u0027],df[\u0027reduced_v_coordinate\u0027],df[\u0027reduced_h_coordinate\u0027],df[\u0027reduced_coordinates_couple\u0027] \u003d convert_pluscode(df[\u0027pluscode_10\u0027])\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    iris_coords_codes \u003d create_iris_polygon_dict(iris_75_df[\u0027CODE_IRIS\u0027],iris_75_df[\u0027Geo Shape\u0027])\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027iris_code\u0027] \u003d find_iris(df[\u0027latitude\u0027],df[\u0027longitude\u0027],iris_coords_codes)\n    \n    df[\u0027date_mutation_year\u0027] \u003d correct_date(df[\u0027year\u0027])\n    \n    df \u003d pd.merge(df, iris_75_df,left_on\u003d\u0027iris_code\u0027,right_on\u003d\u0027CODE_IRIS\u0027,how\u003d\u0027inner\u0027)\n    \n    df \u003d pd.merge(df, iris_data_df,left_on\u003d[\u0027iris_code\u0027,\u0027date_mutation_year\u0027],right_on\u003d[\u0027iris_code\u0027,\u0027date_mutation_year\u0027],how\u003d\u0027inner\u0027)\n    \n    df \u003d pd.merge(df, olc_data_df,left_on\u003d[\u0027reduced_coordinates_couple\u0027,\u0027date_mutation_year\u0027],right_on\u003d[\u0027reduced_coordinates_couple\u0027,\u0027date_mutation_year\u0027],how\u003d\u0027inner\u0027)\n    #dataiku.default_project_key()\n    df_model \u003d df[[\u0027latitude\u0027,\u0027longitude\u0027,\u0027date_mutation_year\u0027,\u0027postal_code\u0027,\u0027surface\u0027,\u0027nb_main_rooms\u0027,\u0027distance_to_centre\u0027,\u0027direction_from_centre\u0027]]\n  \n    \n    \n    return df_model.to_json()\n\n",
      "id": "full",
      "type": "PY_FUNCTION"
    }
  ],
  "publicAccess": true,
  "authRealm": {
    "queryKeys": []
  },
  "versionTag": {
    "versionNumber": 44,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1656347525230
  },
  "creationTag": {
    "versionNumber": 0,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1656020567570
  },
  "tags": [],
  "customFields": {},
  "checklists": {
    "checklists": []
  }
}