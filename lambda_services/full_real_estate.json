{
  "name": "full_real_estate",
  "endpoints": [
    {
      "envSelection": {
        "envMode": "INHERIT"
      },
      "testQueries": [
        {
          "q": {
            "address": "13 rue Saulnier",
            "postal_code": 75009,
            "surface": 75,
            "nb_main_rooms": 3,
            "year": 2021
          }
        },
        {
          "q": {
            "address": "13 rue Saulnier",
            "postal_code": 75009,
            "surface": 75,
            "nb_main_rooms": 3,
            "year": 2021
          }
        }
      ],
      "inputFolderRefs": [
        {
          "ref": "0zySYMnz"
        }
      ],
      "userFunctionName": "api_py_function",
      "code": "import dataiku\nimport pandas as pd, numpy as np\nfrom dataiku import pandasutils as pdu\nfrom geoloc_functions import find_location,distance_to_centre, direction_from_centre\nfrom openlocationcode import openlocationcode as olc\nfrom pluscode_functions import convert_pluscode\nfrom iris_functions import create_iris_polygon_dict, find_iris\nfrom utils_functions import correct_date\nfrom dataiku.apinode import utils\nimport dataikuapi\nimport os.path\n\nfolder_path \u003d folders[0]\npath_of_iris_75 \u003d os.path.join(folder_path, \"iris_75.csv\") \npath_of_iris_data \u003d os.path.join(folder_path, \"transactions_by_iris_code_year_windows_prepared.csv\") \npath_of_olc_data \u003d os.path.join(folder_path, \"transactions_by_coordinates_couple_year_windows_prepared.csv\") \n\n\nwith open(path_of_iris_75) as f:\n    iris_75_df \u003d pd.read_csv(f)\n    \nwith open(path_of_iris_data) as f:\n    iris_data_df \u003d pd.read_csv(f)\n    \nwith open(path_of_olc_data) as f:\n    olc_data_df \u003d pd.read_csv(f)\n\ndataiku.set_default_project_key(\"REALESTATE\")\n\n\n# Insert here initialization code\n\n# This function is the entry point for your Python function API\n# You can call this function with passing \"param1\", \"param2\",\n# \"param3\" as arguments to the API call\n# (see REST API documentation)\ndef api_py_function(address, postal_code, surface,nb_main_rooms,year):\n    \n    df \u003d pd.DataFrame([[address, postal_code, surface,nb_main_rooms,year]],columns\u003d[\u0027address\u0027,\u0027postal_code\u0027,\u0027surface\u0027,\u0027nb_main_rooms\u0027,\u0027year\u0027])\n    \n    df[\u0027address_full\u0027] \u003d df[\u0027address\u0027]+\u0027, \u0027+df[\u0027postal_code\u0027].astype(str)\n\n    df[\u0027latitude\u0027] \u003d find_location(df[\u0027address_full\u0027])[0]\n    df[\u0027longitude\u0027] \u003d find_location(df[\u0027address_full\u0027])[1]\n    \n    df[\u0027distance_to_centre\u0027]\u003d distance_to_centre(df[\u0027latitude\u0027],df[\u0027longitude\u0027])\n\n    df[\u0027direction_from_centre\u0027] \u003d np.vectorize(direction_from_centre)(df[\u0027longitude\u0027],df[\u0027latitude\u0027])\n    \n    df[\u0027pluscode_16_first\u0027] \u003d np.vectorize(olc.encode)(df[\u0027latitude\u0027],df[\u0027longitude\u0027],17)\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027pluscode_10\u0027] \u003d [code[:11] for code in df[\u0027pluscode_16_first\u0027].to_list()]\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027v_coordinate\u0027],df[\u0027h_coordinate\u0027],df[\u0027reduced_v_coordinate\u0027],df[\u0027reduced_h_coordinate\u0027],df[\u0027reduced_coordinates_couple\u0027] \u003d convert_pluscode(df[\u0027pluscode_10\u0027])\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    iris_coords_codes \u003d create_iris_polygon_dict(iris_75_df[\u0027CODE_IRIS\u0027],iris_75_df[\u0027Geo Shape\u0027])\n\n    # -------------------------------------------------------------------------------- NOTEBOOK-CELL: CODE\n    df[\u0027iris_code\u0027] \u003d find_iris(df[\u0027latitude\u0027],df[\u0027longitude\u0027],iris_coords_codes)\n    \n    df[\u0027date_mutation_year\u0027] \u003d correct_date(df[\u0027year\u0027])\n    \n    df \u003d pd.merge(df, iris_75_df,left_on\u003d\u0027iris_code\u0027,right_on\u003d\u0027CODE_IRIS\u0027,how\u003d\u0027inner\u0027)\n    \n    df \u003d pd.merge(df, iris_data_df,left_on\u003d[\u0027iris_code\u0027,\u0027date_mutation_year\u0027],right_on\u003d[\u0027iris_code\u0027,\u0027date_mutation_year\u0027],how\u003d\u0027inner\u0027)\n    \n    df \u003d pd.merge(df, olc_data_df,left_on\u003d[\u0027reduced_coordinates_couple\u0027,\u0027date_mutation_year\u0027],right_on\u003d[\u0027reduced_coordinates_couple\u0027,\u0027date_mutation_year\u0027],how\u003d\u0027inner\u0027)\n    #dataiku.default_project_key()\n    df_model \u003d df[[\u0027latitude\u0027,\u0027longitude\u0027,\u0027date_mutation_year\u0027,\u0027postal_code\u0027,\u0027surface\u0027,\u0027nb_main_rooms\u0027,\u0027distance_to_centre\u0027,\u0027direction_from_centre\u0027]]\n  \n    df_model.rename(columns\u003d{\"surface\": \"surface_m2_not_null\", \"postal_code\": \"code_postal\",\"nb_main_rooms\":\"nombre_pieces_principales\"},inplace\u003dTrue)\n    \n    #model \u003d dataiku.Model(\"BoL37GXK\")\n    #predictor \u003d model.get_predictor()\n    #prediction \u003d predictor.predict(df_model)\n    \n    #client \u003d utils.get_self_client()\n    \n    model_json \u003d df_model.loc[0].to_dict()\n    \n    test_json2 \u003d dict(zip(list(df_model.columns), list(df_model.loc[0])))\n    \n    client \u003d dataikuapi.APINodeClient(\"http://localhost:12000/\", \"full_real_estate\")\n    \n    #test_json \u003d {\u0027latitude\u0027: 48.8749729, \u0027longitude\u0027: 2.3443353, \u0027date_mutation_year\u0027: 2021, \u0027code_postal\u0027: 75009, \u0027surface_m2_not_null\u0027: 75, \u0027nombre_pieces_principales\u0027: 3, \u0027distance_to_centre\u0027: 2.05961129750329, \u0027direction_from_centre\u0027: \u0027N\u0027}\n    \n    \n    for key,value in test_json2.items():\n        if type(value) \u003d\u003d np.int64:\n            test_json2[key] \u003d int(value)\n        \n    #test_json3 \u003d {key:value if type(value) for key,value in test_json2.items()}\n    \n    prediction \u003d client.predict_record(\"model\", test_json2)\n    \n    pred \u003d prediction[\u0027result\u0027][\u0027prediction\u0027]\n    \n    df_final \u003d df[[\u0027address\u0027,\u0027latitude\u0027,\u0027longitude\u0027,\u0027date_mutation_year\u0027,\u0027postal_code\u0027,\u0027surface\u0027,\u0027nb_main_rooms\u0027,\u0027distance_to_centre\u0027,\u0027direction_from_centre\u0027,\u0027prix_m2_not_null_avg_x\u0027,\u0027prix_m2_not_null_avg_y\u0027]]\n\n    df_final.rename(columns\u003d{\"surface\": \"surface_m2_not_null\", \"postal_code\": \"code_postal\",\"nb_main_rooms\":\"nombre_pieces_principales\",\u0027prix_m2_not_null_avg_x\u0027:\u0027prix_m2_avg_iris\u0027,\u0027prix_m2_not_null_avg_y\u0027:\u0027prix_m2_avg_olc\u0027},inplace\u003dTrue)\n    \n    df_final[\u0027estimation_iris\u0027] \u003d df_final[\u0027surface_m2_not_null\u0027] * df_final[\u0027prix_m2_avg_iris\u0027]\n    \n    df_final[\u0027estimation_olc\u0027] \u003d df_final[\u0027surface_m2_not_null\u0027] * df_final[\u0027prix_m2_avg_olc\u0027]\n    \n    df_final[\u0027estimation_model\u0027] \u003d pred\n    \n    df_final[\u0027estimation_final\u0027] \u003d 0.5*df_final[\u0027estimation_model\u0027] + 0.25*df_final[\u0027estimation_iris\u0027] + 0.25*df_final[\u0027estimation_olc\u0027]\n        \n    #result \u003d client.predict_records(\"model\", {\"features\" : model_json})\n                                   \n    return df_final.loc[0].to_dict()\n\n\n\n",
      "id": "full",
      "type": "PY_FUNCTION"
    },
    {
      "modelRef": "BoL37GXK",
      "useJava": true,
      "outputExplanations": false,
      "individualExplanationParams": {
        "method": "ICE",
        "nbExplanations": 3,
        "drawInScoredSet": false,
        "subChunkSize": 5000,
        "shapleyBackgroundSize": 100
      },
      "mlFlowOutputStyle": "RAW",
      "testQueries": [
        {
          "q": {
            "features": {
              "latitude": 48.8749729,
              "longitude": 2.3443353,
              "date_mutation_year": 2021,
              "code_postal": 75009,
              "surface_m2_not_null": 75,
              "nombre_pieces_principales": 3,
              "distance_to_centre": 2.05961129750329,
              "direction_from_centre": "N"
            }
          }
        }
      ],
      "enrichMapping": [
        {
          "datasetRef": "transactions_by_iris_code_year_windows_prepared",
          "packagingType": "BUNDLED_TOCONNECTION",
          "on": [
            {
              "resourceLookupCol": "iris_code"
            },
            {
              "resourceLookupCol": "date_mutation_year"
            }
          ],
          "missingLookupKeyBehavior": "IGNORE",
          "notFoundBehavior": "IGNORE",
          "multiMatchBehavior": "KEEP_FIRST",
          "columnsMapping": {
            "prix_m2_not_null_avg": "prix_m2_not_null_avg"
          }
        },
        {
          "datasetRef": "transactions_by_coordinates_couple_year_windows_prepared",
          "packagingType": "BUNDLED_TOCONNECTION",
          "on": [
            {
              "resourceLookupCol": "reduced_coordinates_couple"
            },
            {
              "resourceLookupCol": "date_mutation_year"
            }
          ],
          "missingLookupKeyBehavior": "IGNORE",
          "notFoundBehavior": "IGNORE",
          "multiMatchBehavior": "KEEP_FIRST",
          "columnsMapping": {
            "prix_m2_not_null_avg": "prix_m2_not_null_avg"
          }
        }
      ],
      "healthCheckQueries": [],
      "returnPostEnrichData": false,
      "auditPostEnrichData": false,
      "id": "model",
      "type": "STD_PREDICTION"
    }
  ],
  "publicAccess": true,
  "authRealm": {
    "queryKeys": []
  },
  "versionTag": {
    "versionNumber": 181,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1657803257627
  },
  "creationTag": {
    "versionNumber": 0,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1656020567570
  },
  "tags": [],
  "customFields": {},
  "checklists": {
    "checklists": []
  }
}